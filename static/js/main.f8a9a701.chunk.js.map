{"version":3,"sources":["MoneyTestingView.js","HomeView.js","TimeTestingView.js","App.js","serviceWorker.js","index.js"],"names":["MoneyTestingView","react_default","a","createElement","GithubPagesRedirect","props","useEffect","path","URLSearchParams","window","location","search","get","history","replace","HomeView","HomeView_GithubPagesRedirect","TimeTestingView","_ref","rate","hourInputRef","useRef","okayButtonRef","_useState","useState","_useState2","Object","slicedToArray","maybeHasNotHeardAudio","setMaybeHasNotHeardAudio","_useState3","_useState4","time","setTime","_useState5","_useState6","hourValue","setHourValue","_useState7","_useState8","minuteValue","setMinuteValue","_useState9","_useState10","answersCorrect","setAnswersCorrect","_useState11","_useState12","answersWrong","setAnswersWrong","_useState13","_useState14","showCorrect","setShowCorrect","_useState15","_useState16","prevWrongAndCorrectAnswer","setPrevWrongAndCorrectAnswer","speak","msg","SpeechSynthesisUtterance","voiceURI","volume","pitch","lang","text","concat","hour","minute","console","log","speechSynthesis","goToNextQuestion","newTime","Math","floor","random","setTimeout","current","focus","handleSubmit","Number","wrongAnswer","correctAnswer","handleKeyDown","e","key","className","value","onChange","target","type","onKeyDown","ref","onClick","style","color","toString","padStart","marginTop","App","react_router_dom","basename","to","react_router","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8a9a701.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst MoneyTestingView = () => {\n  return (\n    <div>\n      money testing\n    </div>\n  );\n};\n\nexport default MoneyTestingView;\n","import React, { useEffect } from 'react';\n\n\nconst GithubPagesRedirect = (props) => {\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const path = urlParams.get('p');\n    if (path) {\n      props.history.replace(path);\n    }\n  });\n  return <div />\n};\n\nconst HomeView = (props) => (\n  <div>\n    <GithubPagesRedirect history={props.history} />\n    Click on an option above\n  </div>\n);\n\nexport default HomeView;\n","import React, {useState, useEffect, useRef} from 'react';\n\n\nconst generateRandomTime = () => {\n  return {\n    hour: Math.floor(Math.random() * 12) + 1,\n    minute: Math.floor(Math.random() * 59) + 1,\n  };\n};\n\nconst TimeTestingView = ({ rate }) => {\n  const hourInputRef = useRef(null);\n  const okayButtonRef = useRef(null);\n  const [maybeHasNotHeardAudio, setMaybeHasNotHeardAudio] = useState(true);\n  const [time, setTime] = useState(null);\n  const [hourValue, setHourValue] = useState('');\n  const [minuteValue, setMinuteValue] = useState('');\n  const [answersCorrect, setAnswersCorrect] = useState(0);\n  const [answersWrong, setAnswersWrong] = useState(0);\n  const [showCorrect, setShowCorrect] = useState(false);\n  const [prevWrongAndCorrectAnswer, setPrevWrongAndCorrectAnswer] = useState(null);\n\n  const speak = (time) => {\n    const msg = new SpeechSynthesisUtterance();\n    msg.voiceURI = 'native';\n    msg.volume = 1; // 0 to 1\n    msg.rate = rate || 0.8; // 0.1 to 10\n    msg.pitch = 1; //0 to 2\n    msg.lang = 'ko-KR';\n    msg.text = `${time.hour}시 ${time.minute}분`;\n    console.log(msg.text);\n    speechSynthesis.speak(msg);\n  };\n\n  const goToNextQuestion = () => {\n    setPrevWrongAndCorrectAnswer(null);\n    const newTime = generateRandomTime();\n    setTime(newTime);\n    speak(newTime);\n  };\n\n  useEffect(() => {\n    if (time) {\n      setTimeout(() => {\n        hourInputRef.current.focus();\n      }, 100);\n    }\n  }, [time]);\n\n  const handleSubmit = () => {\n    setMaybeHasNotHeardAudio(false);\n    if (!hourValue || !minuteValue) {\n      return;\n    }\n\n    if (Number(hourValue) === time.hour && Number(minuteValue) === time.minute) {\n      setAnswersCorrect(answersCorrect + 1);\n      setShowCorrect(true);\n      goToNextQuestion();\n    } else {\n      setAnswersWrong(answersWrong + 1);\n      setPrevWrongAndCorrectAnswer({\n        wrongAnswer: {\n          hour: Number(hourValue),\n          minute: Number(minuteValue),\n        },\n        correctAnswer: {\n          hour: time.hour,\n          minute: time.minute,\n        },\n      });\n    }\n    setHourValue('');\n    setMinuteValue('');\n  };\n\n  const handleKeyDown = (e) => {\n    setShowCorrect(false);\n    if (e.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  useEffect(() => {\n    if (prevWrongAndCorrectAnswer) {\n      okayButtonRef.current.focus();\n    }\n  }, [prevWrongAndCorrectAnswer]);\n  if (!time) {\n    return (\n      <button\n        onClick={() => goToNextQuestion()}\n        type=\"button\"\n        className=\"btn btn-primary\"\n      >\n        Start / 시작\n      </button>\n    );\n  }\n  return (\n    <div>\n      {maybeHasNotHeardAudio && <div>Try turning on your ringer, turning up your volume and pressing \"repeat audio\" if you don't hear anything</div>}\n      <form>\n        <div className=\"form-row\">\n          <div className=\"col-auto my-1\">\n            <div className=\"input-group\">\n              <input\n                className=\"form-control\"\n                value={hourValue}\n                onChange={(e) => setHourValue(e.target.value)}\n                type=\"number\"\n                onKeyDown={handleKeyDown}\n                ref={hourInputRef}\n              />\n              <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                  시\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-auto my-1\">\n            <div className=\"input-group\">\n              <input\n                className=\"form-control\"\n                value={minuteValue}\n                onChange={(e) => setMinuteValue(e.target.value)}\n                type=\"number\"\n                onKeyDown={handleKeyDown}\n              />\n              <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                  분\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-auto my-1\">\n            <button\n              onClick={handleSubmit}\n              type=\"button\"\n              className=\"btn btn-primary\"\n            >\n              Submit\n            </button>\n          </div>\n          <div className=\"col-auto my-1\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={() => {\n                speak(time);\n              }}\n            >\n              Repeat audio\n            </button>\n          </div>\n        </div>\n\n\n      </form>\n\n      {prevWrongAndCorrectAnswer && <div>\n        Wrong!\n        <div>\n          You answered with <span style={{color: 'red'}}>{prevWrongAndCorrectAnswer.wrongAnswer.hour}시 {prevWrongAndCorrectAnswer.wrongAnswer.minute.toString().padStart(2, '0')}분</span>\n        </div>\n        <div>\n          The correct answer was <span style={{color: 'green'}}>{prevWrongAndCorrectAnswer.correctAnswer.hour}시 {prevWrongAndCorrectAnswer.correctAnswer.minute.toString().padStart(2, '0')}분</span>\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          ref={okayButtonRef}\n          onClick={() => {\n            goToNextQuestion();\n          }}>\n\n          Okay, next\n        </button>\n      </div>}\n\n      {showCorrect && <div>\n        Correct!\n      </div>}\n\n      <div style={{marginTop: 100}}>\n        Answers correct: {answersCorrect}\n      </div>\n      <div>\n        Answers wrong: {answersWrong}\n      </div>\n    </div>\n  );\n};\n\nexport default TimeTestingView;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport MoneyTestingView from \"./MoneyTestingView\";\nimport HomeView from \"./HomeView\";\nimport TimeTestingView from \"./TimeTestingView\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nconst App = () => {\n  return (\n    <Router basename=\"/korean-learning\">\n      <div className=\"\">\n        <div className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <div className=\"\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/\">\n                  Home\n                </Link>\n              </li>\n              {/*<li className=\"nav-item\">*/}\n              {/*  <Link to=\"/money\">*/}\n              {/*    <a className=\"nav-link\" href=\"#\">Money</a>*/}\n              {/*  </Link>*/}\n              {/*</li>*/}\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/time\">\n                  Time\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className='container py-5'>\n          <Route path=\"/\" exact component={HomeView} />\n          <Route path=\"/money\" component={MoneyTestingView} />\n          <Route path=\"/time\" component={TimeTestingView} />\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}