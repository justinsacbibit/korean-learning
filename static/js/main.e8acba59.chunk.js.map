{"version":3,"sources":["MoneyTestingView.js","HomeView.js","TimeTestingView.js","App.js","serviceWorker.js","index.js"],"names":["MoneyTestingView","react_default","a","createElement","Blah","props","useEffect","path","URLSearchParams","window","location","search","get","history","replace","HomeView","HomeView_Blah","generateRandomTime","hour","Math","floor","random","minute","TimeTestingView","_ref","rate","hourInputRef","useRef","okayButtonRef","_useState","useState","_useState2","Object","slicedToArray","time","setTime","_useState3","_useState4","hourValue","setHourValue","_useState5","_useState6","minuteValue","setMinuteValue","_useState7","_useState8","answersCorrect","setAnswersCorrect","_useState9","_useState10","answersWrong","setAnswersWrong","_useState11","_useState12","showCorrect","setShowCorrect","_useState13","_useState14","prevWrongAndCorrectAnswer","setPrevWrongAndCorrectAnswer","speak","msg","SpeechSynthesisUtterance","voiceURI","volume","pitch","lang","text","concat","console","log","speechSynthesis","goToNextQuestion","current","focus","handleSubmit","Number","wrongAnswer","correctAnswer","handleKeyDown","e","key","className","value","onChange","target","type","onKeyDown","ref","onClick","style","color","toString","padStart","marginTop","App","react_router_dom","basename","to","react_router","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8acba59.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nconst MoneyTestingView = () => {\n  return (\n    <div>\n      money testing\n    </div>\n  );\n};\n\nexport default MoneyTestingView;\n","import React, { useEffect } from 'react';\n\n\nconst Blah = (props) => {\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const path = urlParams.get('p');\n    if (path) {\n      props.history.replace(path);\n    }\n  });\n  return <div />\n};\n\nconst HomeView = (props) => (\n  <div>\n    <Blah history={props.history} />\n    Click on an option above\n  </div>\n);\n\nexport default HomeView;\n","import React, {useState, useEffect, useRef} from 'react';\n\n\nconst generateRandomTime = () => {\n  return {\n    hour: Math.floor(Math.random() * 12) + 1,\n    minute: Math.floor(Math.random() * 59) + 1,\n  };\n};\n\nconst TimeTestingView = ({ rate }) => {\n  const hourInputRef = useRef(null);\n  const okayButtonRef = useRef(null);\n  const [time, setTime] = useState(generateRandomTime());\n  const [hourValue, setHourValue] = useState('');\n  const [minuteValue, setMinuteValue] = useState('');\n  const [answersCorrect, setAnswersCorrect] = useState(0);\n  const [answersWrong, setAnswersWrong] = useState(0);\n  const [showCorrect, setShowCorrect] = useState(false);\n  const [prevWrongAndCorrectAnswer, setPrevWrongAndCorrectAnswer] = useState(null);\n\n  const speak = () => {\n    const msg = new SpeechSynthesisUtterance();\n    msg.voiceURI = 'native';\n    msg.volume = 1; // 0 to 1\n    msg.rate = rate || 0.8; // 0.1 to 10\n    msg.pitch = 1; //0 to 2\n    msg.lang = 'ko-KR';\n    msg.text = `${time.hour}시 ${time.minute}분`;\n    console.log(msg.text);\n    speechSynthesis.speak(msg);\n  };\n\n  const goToNextQuestion = () => {\n    setPrevWrongAndCorrectAnswer(null);\n    setTime(generateRandomTime());\n    hourInputRef.current.focus();\n  };\n\n  const handleSubmit = () => {\n    if (!hourValue || !minuteValue) {\n      return;\n    }\n\n    if (Number(hourValue) === time.hour && Number(minuteValue) === time.minute) {\n      setAnswersCorrect(answersCorrect + 1);\n      setShowCorrect(true);\n      goToNextQuestion();\n    } else {\n      setAnswersWrong(answersWrong + 1);\n      setPrevWrongAndCorrectAnswer({\n        wrongAnswer: {\n          hour: Number(hourValue),\n          minute: Number(minuteValue),\n        },\n        correctAnswer: {\n          hour: time.hour,\n          minute: time.minute,\n        },\n      });\n    }\n    setHourValue('');\n    setMinuteValue('');\n  };\n\n  const handleKeyDown = (e) => {\n    setShowCorrect(false);\n    if (e.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  useEffect(() => {\n    speak();\n  }, [time]);\n  useEffect(() => {\n    if (prevWrongAndCorrectAnswer) {\n      okayButtonRef.current.focus();\n    }\n  }, [prevWrongAndCorrectAnswer]);\n  return (\n    <div>\n      <form>\n        <div className=\"form-row\">\n          <div className=\"col-auto my-1\">\n            <div className=\"input-group\">\n              <input\n                className=\"form-control\"\n                value={hourValue}\n                onChange={(e) => setHourValue(e.target.value)}\n                type=\"number\"\n                onKeyDown={handleKeyDown}\n                ref={hourInputRef}\n              />\n              <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                  시\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-auto my-1\">\n            <div className=\"input-group\">\n              <input\n                className=\"form-control\"\n                value={minuteValue}\n                onChange={(e) => setMinuteValue(e.target.value)}\n                type=\"number\"\n                onKeyDown={handleKeyDown}\n              />\n              <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                  분\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-auto my-1\">\n            <button\n              onClick={handleSubmit}\n              type=\"button\"\n              className=\"btn btn-primary\"\n            >\n              Submit\n            </button>\n          </div>\n          <div className=\"col-auto my-1\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={() => {\n                speak();\n              }}\n            >\n              Repeat audio\n            </button>\n          </div>\n        </div>\n\n\n      </form>\n\n      {prevWrongAndCorrectAnswer && <div>\n        Wrong!\n        <div>\n          You answered with <span style={{color: 'red'}}>{prevWrongAndCorrectAnswer.wrongAnswer.hour}시 {prevWrongAndCorrectAnswer.wrongAnswer.minute.toString().padStart(2, '0')}분</span>\n        </div>\n        <div>\n          The correct answer was <span style={{color: 'green'}}>{prevWrongAndCorrectAnswer.correctAnswer.hour}시 {prevWrongAndCorrectAnswer.correctAnswer.minute.toString().padStart(2, '0')}분</span>\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          ref={okayButtonRef}\n          onClick={() => {\n            goToNextQuestion();\n          }}>\n\n          Okay, next\n        </button>\n      </div>}\n\n      {showCorrect && <div>\n        Correct!\n      </div>}\n\n      <div style={{marginTop: 100}}>\n        Answers correct: {answersCorrect}\n      </div>\n      <div>\n        Answers wrong: {answersWrong}\n      </div>\n    </div>\n  );\n};\n\nexport default TimeTestingView;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport MoneyTestingView from \"./MoneyTestingView\";\nimport HomeView from \"./HomeView\";\nimport TimeTestingView from \"./TimeTestingView\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nconst App = () => {\n  return (\n    <Router basename=\"/korean-learning\">\n      <div className=\"\">\n        <div className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <div className=\"\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/\">\n                  Home\n                </Link>\n              </li>\n              {/*<li className=\"nav-item\">*/}\n              {/*  <Link to=\"/money\">*/}\n              {/*    <a className=\"nav-link\" href=\"#\">Money</a>*/}\n              {/*  </Link>*/}\n              {/*</li>*/}\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/time\">\n                  Time\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className='container py-5'>\n          <Route path=\"/\" exact component={HomeView} />\n          <Route path=\"/money\" component={MoneyTestingView} />\n          <Route path=\"/time\" component={TimeTestingView} />\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}